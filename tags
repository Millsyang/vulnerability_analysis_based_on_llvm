!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ANALYZER_GLOBAL_H	Analyzer.h	2;"	d
AddrMemPair	PointerAnalysis.h	/^	typedef std::pair<Value *, MemoryLocation *> AddrMemPair;$/;"	t	class:PointerAnalysisPass
AddressTakenFuncs	Analyzer.h	/^	FuncSet AddressTakenFuncs;$/;"	m	struct:GlobalContext
AnalysisStage	MissingChecks.cc	/^int MissingChecksPass::AnalysisStage = 1;$/;"	m	class:MissingChecksPass	file:
AnalysisStage	MissingChecks.h	/^		static int AnalysisStage;$/;"	m	class:MissingChecksPass
ArgNo	MissingChecks.h	/^	int8_t ArgNo;$/;"	m	struct:ModelSC
BBErrMap	SecurityChecks.h	/^	typedef std::map<BasicBlock *, int> BBErrMap;$/;"	t	class:SecurityChecksPass
BList	DataFlowAnalysis.h	/^	list<BasicBlock *>BList;$/;"	m	struct:Path
Bits	Common.h	/^  const uint64_t Bits = 8;$/;"	m	class:ModuleOracle
CALL_GRAPH_H	CallGraph.h	2;"	d
CFGEdge	SecurityChecks.h	/^	typedef std::pair<Instruction *, BasicBlock *> CFGEdge;$/;"	t	class:SecurityChecksPass
COMMON_H	Common.h	2;"	d
CallGraphPass	CallGraph.h	/^		CallGraphPass(GlobalContext *Ctx_)$/;"	f	class:CallGraphPass
CallGraphPass	CallGraph.h	/^class CallGraphPass : public IterativeModulePass {$/;"	c
CallInstSet	Analyzer.h	/^typedef llvm::SmallPtrSet<llvm::CallInst*, 8> CallInstSet;$/;"	t
CalleeMap	Analyzer.h	/^typedef DenseMap<CallInst *, FuncSet> CalleeMap;$/;"	t
Callees	Analyzer.h	/^	CalleeMap Callees;$/;"	m	struct:GlobalContext
CallerMap	Analyzer.h	/^typedef DenseMap<Function*, CallInstSet> CallerMap;$/;"	t
Callers	Analyzer.h	/^	CallerMap Callers;$/;"	m	struct:GlobalContext
CheckInstSets	Analyzer.h	/^	DenseMap<Function *, set<Value *>> CheckInstSets;$/;"	m	struct:GlobalContext
CheckSet	MissingChecks.h	/^		set<Instruction *>CheckSet;$/;"	m	class:MissingChecksPass
CheckedSrcSet	MissingChecks.cc	/^set<src_t> MissingChecksPass::CheckedSrcSet;$/;"	m	class:MissingChecksPass	file:
CheckedSrcSet	MissingChecks.h	/^		static set<src_t>CheckedSrcSet;$/;"	m	class:MissingChecksPass
CheckedUseSet	MissingChecks.cc	/^set<use_t> MissingChecksPass::CheckedUseSet;$/;"	m	class:MissingChecksPass	file:
CheckedUseSet	MissingChecks.h	/^		static set<use_t>CheckedUseSet;$/;"	m	class:MissingChecksPass
Completed_Flag	SecurityChecks.h	/^		Completed_Flag = 256,$/;"	e	enum:SecurityChecksPass::ErrFlag
CopyFuncs	Analyzer.h	/^	map<string, tuple<int8_t, int8_t, int8_t>> CopyFuncs;$/;"	m	struct:GlobalContext
Ctx	Analyzer.h	/^	GlobalContext *Ctx;$/;"	m	class:IterativeModulePass
Ctx	DataFlowAnalysis.h	/^		GlobalContext *Ctx;$/;"	m	class:DataFlowAnalysis
DATA_FLOW_ANALYSIS_H	DataFlowAnalysis.h	2;"	d
DFA	MissingChecks.h	/^		DataFlowAnalysis DFA;$/;"	m	class:MissingChecksPass
DL	CallGraph.h	/^		const DataLayout *DL;$/;"	m	class:CallGraphPass
DataFetchFuncs	Analyzer.h	/^	map<string, pair<int8_t, int8_t>> DataFetchFuncs;$/;"	m	struct:GlobalContext
DataFlowAnalysis	DataFlowAnalysis.h	/^		DataFlowAnalysis(GlobalContext *GCtx) {Ctx = GCtx;}$/;"	f	class:DataFlowAnalysis
DataFlowAnalysis	DataFlowAnalysis.h	/^class DataFlowAnalysis {$/;"	c
Dumper	Common.h	/^  Dumper() {}$/;"	f	class:Dumper
Dumper	Common.h	/^class Dumper {$/;"	c
ERR	Common.h	28;"	d
ERRNO_MASK	SecurityChecks.cc	23;"	d	file:
ERRNO_PREFIX	SecurityChecks.cc	22;"	d	file:
ERRNO_TYPE	SecurityChecks.cc	31;"	d	file:
ERR_HANDLE_MASK	SecurityChecks.cc	27;"	d	file:
ERR_RETURN_MASK	SecurityChecks.cc	26;"	d	file:
EdgeErrMap	SecurityChecks.h	/^	typedef std::map<CFGEdge, int> EdgeErrMap;$/;"	t	class:SecurityChecksPass
EdgeValue	SecurityChecks.h	/^	typedef std::pair<CFGEdge, Value *> EdgeValue;$/;"	t	class:SecurityChecksPass
End	DataFlowAnalysis.h	/^	Value *End;$/;"	m	struct:Path
ErrFlag	SecurityChecks.h	/^	enum ErrFlag {$/;"	g	class:SecurityChecksPass
ErrSelectInstSet	SecurityChecks.h	/^	static set<Instruction *>ErrSelectInstSet;$/;"	m	class:SecurityChecksPass
ErrorHandleFuncs	Analyzer.h	/^	set<string> ErrorHandleFuncs;$/;"	m	struct:GlobalContext
FuncAAResults	Analyzer.h	/^    FuncAAResultsMap FuncAAResults;$/;"	m	struct:GlobalContext
FuncAAResultsMap	Analyzer.h	/^typedef unordered_map<Function *, AAResults *> FuncAAResultsMap;$/;"	t
FuncPAResults	Analyzer.h	/^    FuncPointerAnalysisMap FuncPAResults;$/;"	m	struct:GlobalContext
FuncPointerAnalysisMap	Analyzer.h	/^typedef unordered_map<Function *, PointerAnalysisMap> FuncPointerAnalysisMap;$/;"	t
FuncSet	Analyzer.h	/^typedef llvm::SmallPtrSet<llvm::Function*, 8> FuncSet;$/;"	t
GlobalContext	Analyzer.h	/^	GlobalContext() {$/;"	f	struct:GlobalContext
GlobalContext	Analyzer.h	/^struct GlobalContext {$/;"	s
GlobalCtx	Analyzer.cc	/^GlobalContext GlobalCtx;$/;"	v
GlobalFuncs	Analyzer.h	/^	NameFuncMap GlobalFuncs;$/;"	m	struct:GlobalContext
Helper	Common.h	/^class Helper {$/;"	c
ICMP_EQ	MissingChecks.h	/^	ICMP_EQ,$/;"	e	enum:SCOperator
ICMP_GT	MissingChecks.h	/^	ICMP_GT, \/\/ including ICMP_GE$/;"	e	enum:SCOperator
ICMP_LT	MissingChecks.h	/^	ICMP_LT, \/\/ including ICMP_LE$/;"	e	enum:SCOperator
ICMP_NE	MissingChecks.h	/^	ICMP_NE,$/;"	e	enum:SCOperator
ICMP_OTHER	MissingChecks.h	/^	ICMP_OTHER,$/;"	e	enum:SCOperator
ID	Analyzer.h	/^	const char * ID;$/;"	m	class:IterativeModulePass
IndirectCallInsts	Analyzer.h	/^	std::vector<CallInst *>IndirectCallInsts;$/;"	m	struct:GlobalContext
Int8PtrTy	CallGraph.h	/^		Type *Int8PtrTy;$/;"	m	class:CallGraphPass
IntPtrTy	CallGraph.h	/^		Type *IntPtrTy;$/;"	m	class:CallGraphPass
InvolvedModules	Analyzer.h	/^	set<string> InvolvedModules;$/;"	m	struct:GlobalContext
IterativeModulePass	Analyzer.h	/^	IterativeModulePass(GlobalContext *Ctx_, const char *ID_)$/;"	f	class:IterativeModulePass
IterativeModulePass	Analyzer.h	/^class IterativeModulePass {$/;"	c
KBLU	Common.h	40;"	d
KCYN	Common.h	42;"	d
KGRN	Common.h	38;"	d
KMAG	Common.h	41;"	d
KNRM	Common.h	36;"	d
KRED	Common.h	37;"	d
KWHT	Common.h	43;"	d
KYEL	Common.h	39;"	d
LINUX_SOURCE	Common.cc	8;"	d	file:
LOG	Common.h	17;"	d
LPSet	DataFlowAnalysis.h	/^		std::set<Value *> LPSet; $/;"	m	class:DataFlowAnalysis
LoadStaticData	Analyzer.cc	/^void LoadStaticData(GlobalContext *GCtx) {$/;"	f
MAX_BLOCKS_SUPPORT	Config.h	18;"	d
MAX_STAGE	MissingChecks.cc	20;"	d	file:
MISSING_CHECKS_H	MissingChecks.h	2;"	d
MIdx	MissingChecks.h	/^		int MIdx;$/;"	m	class:MissingChecksPass
MUST_ALIAS	PointerAnalysis.cc	9;"	d	file:
May_Handle_Err	SecurityChecks.h	/^		May_Handle_Err = 32,$/;"	e	enum:SecurityChecksPass::ErrFlag
May_Return_Err	SecurityChecks.h	/^		May_Return_Err = 2,$/;"	e	enum:SecurityChecksPass::ErrFlag
MissingChecksPass	MissingChecks.h	/^		MissingChecksPass(GlobalContext *Ctx_)$/;"	f	class:MissingChecksPass
MissingChecksPass	MissingChecks.h	/^class MissingChecksPass : public IterativeModulePass {$/;"	c
ModelSC	MissingChecks.h	/^struct ModelSC {$/;"	s
ModuleList	Analyzer.h	/^typedef vector< pair<llvm::Module*, llvm::StringRef> > ModuleList;$/;"	t
ModuleMaps	Analyzer.h	/^	ModuleNameMap ModuleMaps;$/;"	m	struct:GlobalContext
ModuleNameMap	Analyzer.h	/^typedef unordered_map<llvm::Module*, llvm::StringRef> ModuleNameMap;$/;"	t
ModuleOracle	Common.h	/^  ModuleOracle(Module &m) :$/;"	f	class:ModuleOracle
ModuleOracle	Common.h	/^class ModuleOracle {$/;"	c
Modules	Analyzer.h	/^	ModuleList Modules;$/;"	m	struct:GlobalContext
Must_Handle_Err	SecurityChecks.h	/^		Must_Handle_Err = 16,$/;"	e	enum:SecurityChecksPass::ErrFlag
Must_Return_Err	SecurityChecks.h	/^		Must_Return_Err = 1,$/;"	e	enum:SecurityChecksPass::ErrFlag
NameFuncMap	Analyzer.h	/^typedef unordered_map<string, llvm::Function*> NameFuncMap;$/;"	t
NumCondStatements	Analyzer.h	/^	unsigned NumCondStatements;$/;"	m	struct:GlobalContext
NumSecurityChecks	Analyzer.h	/^	unsigned NumSecurityChecks;$/;"	m	struct:GlobalContext
OP	Common.h	24;"	d
POINTER_ANALYSIS_H	PointerAnalysis.h	2;"	d
Path	DataFlowAnalysis.h	/^struct Path {$/;"	s
PointerAnalysisMap	Analyzer.h	/^typedef DenseMap<Value *, SmallPtrSet<Value *, 16>> PointerAnalysisMap;$/;"	t
PointerAnalysisPass	PointerAnalysis.h	/^	PointerAnalysisPass(GlobalContext *Ctx_)$/;"	f	class:PointerAnalysisPass
PointerAnalysisPass	PointerAnalysis.h	/^class PointerAnalysisPass : public IterativeModulePass {$/;"	c
PrintResults	Analyzer.cc	/^void PrintResults(GlobalContext *GCtx) {$/;"	f
ProcessResults	Analyzer.cc	/^void ProcessResults(GlobalContext *GCtx) {$/;"	f
REPORT_SRC	MissingChecks.cc	25;"	d	file:
REPORT_USE	MissingChecks.cc	26;"	d	file:
Reserved_Handle1	SecurityChecks.h	/^		Reserved_Handle1 = 64,$/;"	e	enum:SecurityChecksPass::ErrFlag
Reserved_Handle2	SecurityChecks.h	/^		Reserved_Handle2 = 128,$/;"	e	enum:SecurityChecksPass::ErrFlag
Reserved_Return1	SecurityChecks.h	/^		Reserved_Return1 = 4,$/;"	e	enum:SecurityChecksPass::ErrFlag
Reserved_Return2	SecurityChecks.h	/^		Reserved_Return2 = 8,$/;"	e	enum:SecurityChecksPass::ErrFlag
SACONFIG_H	Config.h	2;"	d
SCBranch	Common.h	/^  Value *SCBranch;        \/* Branch associated to the check *\/$/;"	m	class:SecurityCheck
SCC	MissingChecks.h	/^	SCCondition SCC;$/;"	m	struct:ModelSC
SCC_CONST	MissingChecks.h	/^	SCC_CONST,$/;"	e	enum:SCCondition
SCC_NEG	MissingChecks.h	/^	SCC_NEG,$/;"	e	enum:SCCondition
SCC_NULL	MissingChecks.h	/^	SCC_NULL,$/;"	e	enum:SCCondition
SCC_OTHER	MissingChecks.h	/^	SCC_OTHER,$/;"	e	enum:SCCondition
SCC_POS	MissingChecks.h	/^	SCC_POS,$/;"	e	enum:SCCondition
SCC_VAR	MissingChecks.h	/^	SCC_VAR,$/;"	e	enum:SCCondition
SCC_ZERO	MissingChecks.h	/^	SCC_ZERO,$/;"	e	enum:SCCondition
SCCondition	MissingChecks.h	/^enum SCCondition {$/;"	g
SCO	MissingChecks.h	/^	SCOperator SCO;$/;"	m	struct:ModelSC
SCOperator	MissingChecks.h	/^enum SCOperator {$/;"	g
SCheck	Common.h	/^  Value *SCheck;          \/* Security check of this critical variable *\/$/;"	m	class:SecurityCheck
SCheckFileName	Common.h	/^  string SCheckFileName; \/* Source file name of security check *\/$/;"	m	class:SecurityCheck
SCheckLineNo	Common.h	/^  unsigned SCheckLineNo;  \/* Line number of security check *\/$/;"	m	class:SecurityCheck
SECURITY_CHECKS_H	SecurityChecks.h	2;"	d
SOUND_MODE	Config.h	15;"	d
SecurityCheck	Common.h	/^  SecurityCheck(Value *sk, Value *br) : SCheck(sk), SCBranch(br) {$/;"	f	class:SecurityCheck
SecurityCheck	Common.h	/^class SecurityCheck {$/;"	c
SecurityCheckSets	Analyzer.h	/^	DenseMap<Function *, set<SecurityCheck>> SecurityCheckSets;$/;"	m	struct:GlobalContext
SecurityChecksPass	SecurityChecks.h	/^	SecurityChecksPass(GlobalContext *Ctx_)$/;"	f	class:SecurityChecksPass
SecurityChecksPass	SecurityChecks.h	/^class SecurityChecksPass : public IterativeModulePass {$/;"	c
SetCopyFuncs	Config.h	/^static void SetCopyFuncs($/;"	f
SetDataFetchFuncs	Config.h	/^static void SetDataFetchFuncs($/;"	f
SetErrorHandleFuncs	Config.h	/^static void SetErrorHandleFuncs(set<string> &ErrorHandleFuncs) {$/;"	f
SrcCheckCount	MissingChecks.cc	/^map<src_t, unsigned> MissingChecksPass::SrcCheckCount;$/;"	m	class:MissingChecksPass	file:
SrcCheckCount	MissingChecks.h	/^		static map<src_t, unsigned>SrcCheckCount;$/;"	m	class:MissingChecksPass
SrcChecksMap	MissingChecks.cc	/^map<src_t, set<ModelSC>> MissingChecksPass::SrcChecksMap;$/;"	m	class:MissingChecksPass	file:
SrcChecksMap	MissingChecks.h	/^		static map<src_t, set<ModelSC>>SrcChecksMap;$/;"	m	class:MissingChecksPass
SrcTotalCount	MissingChecks.cc	/^map<src_t, unsigned> MissingChecksPass::SrcTotalCount;$/;"	m	class:MissingChecksPass	file:
SrcTotalCount	MissingChecks.h	/^		static map<use_t, unsigned>SrcTotalCount;$/;"	m	class:MissingChecksPass
SrcUncheckCount	MissingChecks.cc	/^map<src_t, unsigned> MissingChecksPass::SrcUncheckCount;$/;"	m	class:MissingChecksPass	file:
SrcUncheckCount	MissingChecks.h	/^		static map<src_t, unsigned>SrcUncheckCount;$/;"	m	class:MissingChecksPass
SrcUnchecksMap	MissingChecks.cc	/^map<src_t, set<Value *>> MissingChecksPass::SrcUnchecksMap;$/;"	m	class:MissingChecksPass	file:
SrcUnchecksMap	MissingChecks.h	/^		static map<src_t, set<Value *>>SrcUnchecksMap;$/;"	m	class:MissingChecksPass
SrcUse	MissingChecks.h	/^	Value *SrcUse;$/;"	m	struct:ModelSC
Start	DataFlowAnalysis.h	/^	Value *Start;$/;"	m	struct:Path
TLI	PointerAnalysis.h	/^	TargetLibraryInfo *TLI;$/;"	m	class:PointerAnalysisPass
TrackedSrcSet	MissingChecks.cc	/^set<Value *> MissingChecksPass::TrackedSrcSet;$/;"	m	class:MissingChecksPass	file:
TrackedSrcSet	MissingChecks.h	/^		static set<Value *>TrackedSrcSet;$/;"	m	class:MissingChecksPass
TrackedUseSet	MissingChecks.cc	/^set<Value *> MissingChecksPass::TrackedUseSet;$/;"	m	class:MissingChecksPass	file:
TrackedUseSet	MissingChecks.h	/^		static set<Value *>TrackedUseSet;$/;"	m	class:MissingChecksPass
UnifiedFuncMap	Analyzer.h	/^	DenseMap<size_t, Function *>UnifiedFuncMap;$/;"	m	struct:GlobalContext
UnifiedFuncSet	Analyzer.h	/^	set<Function *>UnifiedFuncSet;$/;"	m	struct:GlobalContext
UseCheckCount	MissingChecks.cc	/^map<use_t, unsigned> MissingChecksPass::UseCheckCount;$/;"	m	class:MissingChecksPass	file:
UseCheckCount	MissingChecks.h	/^		static map<use_t, unsigned>UseCheckCount;$/;"	m	class:MissingChecksPass
UseChecksMap	MissingChecks.cc	/^map<use_t, set<ModelSC>> MissingChecksPass::UseChecksMap;$/;"	m	class:MissingChecksPass	file:
UseChecksMap	MissingChecks.h	/^		static map<use_t, set<ModelSC>>UseChecksMap;$/;"	m	class:MissingChecksPass
UseTotalCount	MissingChecks.cc	/^map<use_t, unsigned> MissingChecksPass::UseTotalCount;$/;"	m	class:MissingChecksPass	file:
UseTotalCount	MissingChecks.h	/^		static map<use_t, unsigned>UseTotalCount;$/;"	m	class:MissingChecksPass
UseUncheckCount	MissingChecks.cc	/^map<use_t, unsigned> MissingChecksPass::UseUncheckCount;$/;"	m	class:MissingChecksPass	file:
UseUncheckCount	MissingChecks.h	/^		static map<use_t, unsigned>UseUncheckCount;$/;"	m	class:MissingChecksPass
UseUnchecksMap	MissingChecks.cc	/^map<use_t, set<Value *>> MissingChecksPass::UseUnchecksMap;$/;"	m	class:MissingChecksPass	file:
UseUnchecksMap	MissingChecks.h	/^		static map<use_t, set<Value *>>UseUnchecksMap;$/;"	m	class:MissingChecksPass
WARN	Common.h	26;"	d
addSecurityCheck	SecurityChecks.cc	/^void SecurityChecksPass::addSecurityCheck(Value *SC, Value *Br,$/;"	f	class:SecurityChecksPass
addSrcCheck	MissingChecks.cc	/^void MissingChecksPass::addSrcCheck(src_t Src, ModelSC MSC) {$/;"	f	class:MissingChecksPass
addSrcUncheck	MissingChecks.cc	/^void MissingChecksPass::addSrcUncheck(src_t Src,$/;"	f	class:MissingChecksPass
addUseCheck	MissingChecks.cc	/^void MissingChecksPass::addUseCheck(use_t Use, ModelSC MSC) {$/;"	f	class:MissingChecksPass
addUseUncheck	MissingChecks.cc	/^void MissingChecksPass::addUseUncheck(use_t Use, $/;"	f	class:MissingChecksPass
augmentMustAlias	PointerAnalysis.cc	/^void PointerAnalysisPass::augmentMustAlias(Function *F, Value *P, $/;"	f	class:PointerAnalysisPass
callHash	Common.cc	/^size_t callHash(CallInst *CI) {$/;"	f
checkErrHandle	SecurityChecks.cc	/^void SecurityChecksPass::checkErrHandle(Function *F, $/;"	f	class:SecurityChecksPass
checkErrReturn	SecurityChecks.cc	/^void SecurityChecksPass::checkErrReturn(Function *F, $/;"	f	class:SecurityChecksPass
checkErrValueFlow	SecurityChecks.cc	/^void SecurityChecksPass::checkErrValueFlow($/;"	f	class:SecurityChecksPass
collectAliasPointers	MissingChecks.cc	/^void MissingChecksPass::collectAliasPointers(Function *F, LoadInst$/;"	f	class:MissingChecksPass
collectPointers	PointerAnalysis.cc	/^void PointerAnalysisPass::collectPointers(Function *F, $/;"	f	class:PointerAnalysisPass
collectPredReachBlocks	DataFlowAnalysis.cc	/^void DataFlowAnalysis::collectPredReachBlocks(BasicBlock *BB,$/;"	f	class:DataFlowAnalysis
collectSuccReachBlocks	DataFlowAnalysis.cc	/^void DataFlowAnalysis::collectSuccReachBlocks(BasicBlock *BB,$/;"	f	class:DataFlowAnalysis
convertDotInName	Common.h	/^  static void convertDotInName(string &name) {$/;"	f	class:Helper
countSrcUseChecks	MissingChecks.cc	/^void MissingChecksPass::countSrcUseChecks(Function *F, $/;"	f	class:MissingChecksPass
countSrcUseUnchecks	MissingChecks.cc	/^void MissingChecksPass::countSrcUseUnchecks(Function *F) {$/;"	f	class:MissingChecksPass
detectAliasPointers	PointerAnalysis.cc	/^void PointerAnalysisPass::detectAliasPointers(Function *F,$/;"	f	class:PointerAnalysisPass
dl	Common.h	/^  const DataLayout &dl;$/;"	m	class:ModuleOracle
doFinalization	Analyzer.h	/^	virtual bool doFinalization(llvm::Module *M)$/;"	f	class:IterativeModulePass
doFinalization	CallGraph.cc	/^bool CallGraphPass::doFinalization(Module *M) {$/;"	f	class:CallGraphPass
doFinalization	MissingChecks.cc	/^bool MissingChecksPass::doFinalization(Module *M) {$/;"	f	class:MissingChecksPass
doFinalization	PointerAnalysis.cc	/^bool PointerAnalysisPass::doFinalization(Module *M) {$/;"	f	class:PointerAnalysisPass
doFinalization	SecurityChecks.cc	/^bool SecurityChecksPass::doFinalization(Module *M) {$/;"	f	class:SecurityChecksPass
doInitialization	Analyzer.h	/^	virtual bool doInitialization(llvm::Module *M)$/;"	f	class:IterativeModulePass
doInitialization	CallGraph.cc	/^bool CallGraphPass::doInitialization(Module *M) {$/;"	f	class:CallGraphPass
doInitialization	MissingChecks.cc	/^bool MissingChecksPass::doInitialization(Module *M) {$/;"	f	class:MissingChecksPass
doInitialization	PointerAnalysis.cc	/^bool PointerAnalysisPass::doInitialization(Module *M) {$/;"	f	class:PointerAnalysisPass
doInitialization	SecurityChecks.cc	/^bool SecurityChecksPass::doInitialization(Module *M) {$/;"	f	class:SecurityChecksPass
doModulePass	Analyzer.h	/^	virtual bool doModulePass(llvm::Module *M)$/;"	f	class:IterativeModulePass
doModulePass	CallGraph.cc	/^bool CallGraphPass::doModulePass(Module *M) {$/;"	f	class:CallGraphPass
doModulePass	MissingChecks.cc	/^bool MissingChecksPass::doModulePass(Module *M) {$/;"	f	class:MissingChecksPass
doModulePass	PointerAnalysis.cc	/^bool PointerAnalysisPass::doModulePass(Module *M) {$/;"	f	class:PointerAnalysisPass
doModulePass	SecurityChecks.cc	/^bool SecurityChecksPass::doModulePass(Module *M) {$/;"	f	class:SecurityChecksPass
dumpErrEdges	SecurityChecks.cc	/^void SecurityChecksPass::dumpErrEdges(EdgeErrMap &edgeErrMap) {$/;"	f	class:SecurityChecksPass
escapeType	CallGraph.cc	/^void CallGraphPass::escapeType(Type *Ty, int Idx) {$/;"	f	class:CallGraphPass
extractMacro	Common.cc	/^string extractMacro(string line, Instruction *I) {$/;"	f
findCalleesWithMLTA	CallGraph.cc	/^bool CallGraphPass::findCalleesWithMLTA(CallInst *CI, FuncSet &FS) {$/;"	f	class:CallGraphPass
findCalleesWithType	CallGraph.cc	/^void CallGraphPass::findCalleesWithType(CallInst *CI, FuncSet &S) {$/;"	f	class:CallGraphPass
findClosestBranch	MissingChecks.cc	/^void MissingChecksPass::findClosestBranch (Value *Src, Value *SC, $/;"	f	class:MissingChecksPass
findErrorCodes	SecurityChecks.cc	/^void SecurityChecksPass::findErrorCodes(Function *F) {$/;"	f	class:SecurityChecksPass
findInFuncSourceCV	DataFlowAnalysis.cc	/^void DataFlowAnalysis::findInFuncSourceCV(Value *V, set<Value *> &SourceSet, $/;"	f	class:DataFlowAnalysis
findParallelPaths	MissingChecks.cc	/^void MissingChecksPass::findParallelPaths(set<Value *> &BrSet, $/;"	f	class:MissingChecksPass
findPaths	DataFlowAnalysis.cc	/^void DataFlowAnalysis::findPaths(Value *Start, Value *End, set<Path> &PathSet) {$/;"	f	class:DataFlowAnalysis
findPaths	DataFlowAnalysis.cc	/^void DataFlowAnalysis::findPaths(Value *Start, set<Path> &PathSet) {$/;"	f	class:DataFlowAnalysis
findSameVariablesFrom	SecurityChecks.cc	/^void SecurityChecksPass::findSameVariablesFrom(Value *V, $/;"	f	class:SecurityChecksPass
findSourceCV	DataFlowAnalysis.cc	/^void DataFlowAnalysis::findSourceCV(Value *V, set<Value *> &SourceSet, $/;"	f	class:DataFlowAnalysis
findSourceCV	MissingChecks.cc	/^void MissingChecksPass::findSourceCV(Value *V, set<Value *> &CVSet, $/;"	f	class:MissingChecksPass
findSourceCVAlias	DataFlowAnalysis.cc	/^void DataFlowAnalysis::findSourceCVAlias($/;"	f	class:DataFlowAnalysis
findSources	DataFlowAnalysis.cc	/^void DataFlowAnalysis::findSources(Value *V, set<Value *> &SrcSet) {$/;"	f	class:DataFlowAnalysis
findUses	DataFlowAnalysis.cc	/^void DataFlowAnalysis::findUses(Instruction *BorderInsn, Value *Target, $/;"	f	class:DataFlowAnalysis
funcHash	Common.cc	/^size_t funcHash(Function *F, bool withName) {$/;"	f
funcSetIntersection	CallGraph.cc	/^void CallGraphPass::funcSetIntersection(FuncSet &FS1, FuncSet &FS2, $/;"	f	class:CallGraphPass
getAliasPointers	DataFlowAnalysis.cc	/^void DataFlowAnalysis::getAliasPointers(Value *Addr,$/;"	f	class:DataFlowAnalysis
getArgByNo	Common.cc	/^Argument *getArgByNo(Function *F, int8_t ArgNo) {$/;"	f
getBits	Common.h	/^  uint64_t getBits() {$/;"	f	class:ModuleOracle
getCalledFuncName	Common.cc	/^StringRef getCalledFuncName(Instruction *I) {$/;"	f
getDataLayout	Common.h	/^  const DataLayout &getDataLayout() {$/;"	f	class:ModuleOracle
getFileName	Common.cc	/^string getFileName(DILocation *Loc, DISubprogram *SP) {$/;"	f
getMacroInfo	Common.cc	/^string getMacroInfo(Value *V) {$/;"	f
getPointerSize	Common.h	/^  uint64_t getPointerSize() {$/;"	f	class:ModuleOracle
getPointerWidth	Common.h	/^  uint64_t getPointerWidth() {$/;"	f	class:ModuleOracle
getSCBranch	Common.h	/^  Value *getSCBranch() { return SCBranch; }$/;"	f	class:SecurityCheck
getSCheck	Common.h	/^  Value *getSCheck() { return SCheck; }$/;"	f	class:SecurityCheck
getSCheckFileName	Common.h	/^  string getSCheckFileName() { return SCheckFileName; }$/;"	f	class:SecurityCheck
getSCheckLineNo	Common.h	/^  unsigned getSCheckLineNo() { return SCheckLineNo; }$/;"	f	class:SecurityCheck
getSourceCodeInfo	Common.cc	/^void getSourceCodeInfo(Value *V, string &file,$/;"	f
getSourceCodeLine	Common.cc	/^void getSourceCodeLine(Value *V, string &line) {$/;"	f
getSourceFuncName	Common.cc	/^string getSourceFuncName(Instruction *I) {$/;"	f
getSourceLine	Common.cc	/^string getSourceLine(string fn_str, unsigned lineno) {$/;"	f
getSourceLocation	Common.cc	/^DILocation *getSourceLocation(Instruction *I) {$/;"	f
getSourcePointer	PointerAnalysis.cc	/^Value *PointerAnalysisPass::getSourcePointer(Value *P) {$/;"	f	class:PointerAnalysisPass
getTargetLibraryInfo	Common.h	/^  TargetLibraryInfo &getTargetLibraryInfo() {$/;"	f	class:ModuleOracle
getTypeOffset	Common.h	/^  uint64_t getTypeOffset(Type *type, unsigned idx) {$/;"	f	class:ModuleOracle
getTypeSize	Common.h	/^  uint64_t getTypeSize(Type *ty) {$/;"	f	class:ModuleOracle
getTypeWidth	Common.h	/^  uint64_t getTypeWidth(Type *ty) {$/;"	f	class:ModuleOracle
getValueName	Common.h	/^  static string getValueName(Value *v) {$/;"	f	class:Helper
getValueRepr	Common.h	/^  static string getValueRepr(Value *v) {$/;"	f	class:Helper
getValueType	Common.h	/^  static string getValueType(Value *v) {$/;"	f	class:Helper
hashIdxHash	Common.cc	/^size_t hashIdxHash(size_t Hs, int Idx) {$/;"	f
identifyCheckedTargets	MissingChecks.cc	/^void MissingChecksPass::identifyCheckedTargets(Function *F,$/;"	f	class:MissingChecksPass
identifyIndirectTargets	MissingChecks.cc	/^void MissingChecksPass::identifyIndirectTargets(Function *F,$/;"	f	class:MissingChecksPass
identifySecurityChecks	SecurityChecks.cc	/^void SecurityChecksPass::identifySecurityChecks(Function *F, $/;"	f	class:SecurityChecksPass
inModeledCheckSet	MissingChecks.cc	/^bool MissingChecksPass::inModeledCheckSet(CmpInst *CmpI,$/;"	f	class:MissingChecksPass
inferErrBranch	SecurityChecks.cc	/^int SecurityChecksPass::inferErrBranch(Instruction *Cond) {$/;"	f	class:SecurityChecksPass
isCheckedBackward	MissingChecks.cc	/^void MissingChecksPass::isCheckedBackward(Function *F, use_t Use,$/;"	f	class:MissingChecksPass
isCheckedForward	MissingChecks.cc	/^void MissingChecksPass::isCheckedForward(Function *F, src_t Src,$/;"	f	class:MissingChecksPass
isCompositeType	CallGraph.cc	/^bool CallGraphPass::isCompositeType(Type *Ty) {$/;"	f	class:CallGraphPass
isConstant	Common.cc	/^bool isConstant(Value *V) {$/;"	f
isReintPointerType	Common.h	/^  bool isReintPointerType(Type *ty) {$/;"	f	class:ModuleOracle
isValueErrno	SecurityChecks.cc	/^bool SecurityChecksPass::isValueErrno(Value *V, Function *F) {$/;"	f	class:SecurityChecksPass
is_errno	SecurityChecks.cc	24;"	d	file:
main	Analyzer.cc	/^int main(int argc, char **argv) {$/;"	f
markAllEdgesErrFlag	SecurityChecks.cc	/^bool SecurityChecksPass::markAllEdgesErrFlag(Function *F, BBErrMap &bbErrMap, $/;"	f	class:SecurityChecksPass
markBBErr	SecurityChecks.cc	/^void SecurityChecksPass::markBBErr(BasicBlock *BB, $/;"	f	class:SecurityChecksPass
markEdgesToErrReturn	SecurityChecks.cc	/^void SecurityChecksPass::markEdgesToErrReturn(BasicBlock *BB, $/;"	f	class:SecurityChecksPass
mayReturnErr	SecurityChecks.cc	/^bool SecurityChecksPass::mayReturnErr(Function *F) {$/;"	f	class:SecurityChecksPass
mergeFlag	SecurityChecks.cc	/^void SecurityChecksPass::mergeFlag(int &errFlag, int &newFlag) {$/;"	f	class:SecurityChecksPass
modelCheck	MissingChecks.cc	/^ModelSC MissingChecksPass::modelCheck(CmpInst *CmpI, $/;"	f	class:MissingChecksPass
nextLayerBaseType	CallGraph.cc	/^Value *CallGraphPass:: nextLayerBaseType(Value *V, Type * &BTy, $/;"	f	class:CallGraphPass
operator <	Common.h	/^	friend bool operator< (const SecurityCheck &SC1, const SecurityCheck &SC2) {$/;"	f	class:SecurityCheck
operator <	MissingChecks.h	/^	friend bool operator< (const ModelSC &MSC1, $/;"	f	struct:ModelSC
performBackwardAnalysis	DataFlowAnalysis.cc	/^void DataFlowAnalysis::performBackwardAnalysis(Function* F, Value* V, $/;"	f	class:DataFlowAnalysis
possibleUseStResult	DataFlowAnalysis.cc	/^bool DataFlowAnalysis::possibleUseStResult(Instruction *Inst, $/;"	f	class:DataFlowAnalysis
printSourceCodeInfo	Common.cc	/^void printSourceCodeInfo(Function *F) {$/;"	f
printSourceCodeInfo	Common.cc	/^void printSourceCodeInfo(Value *V) {$/;"	f
processResults	MissingChecks.cc	/^void MissingChecksPass::processResults() {$/;"	f	class:MissingChecksPass
recurMarkEdgesFromBlock	SecurityChecks.cc	/^void SecurityChecksPass::recurMarkEdgesFromBlock(CFGEdge &CE, int flag, $/;"	f	class:SecurityChecksPass
recurMarkEdgesToBlock	SecurityChecks.cc	/^void SecurityChecksPass::recurMarkEdgesToBlock(CFGEdge &CE, int flag, $/;"	f	class:SecurityChecksPass
recurMarkEdgesToErrHandle	SecurityChecks.cc	/^void SecurityChecksPass::recurMarkEdgesToErrHandle(BasicBlock *BB, $/;"	f	class:SecurityChecksPass
recurMarkEdgesToErrReturn	SecurityChecks.cc	/^void SecurityChecksPass::recurMarkEdgesToErrReturn(BasicBlock *BB, $/;"	f	class:SecurityChecksPass
resetStructures	DataFlowAnalysis.h	/^		void resetStructures() { LPSet.clear(); } $/;"	f	class:DataFlowAnalysis
run	Analyzer.cc	/^void IterativeModulePass::run(ModuleList &modules) {$/;"	f	class:IterativeModulePass
sigFuncsMap	Analyzer.h	/^	DenseMap<size_t, FuncSet>sigFuncsMap;$/;"	m	struct:GlobalContext
src_c	DataFlowAnalysis.cc	/^pair<Value *, int8_t> src_c(Value *V, int8_t Arg) {$/;"	f
src_t	DataFlowAnalysis.h	/^typedef pair<Value *, int8_t> src_t;$/;"	t
test_funcs	MissingChecks.cc	/^const string test_funcs[] = {$/;"	v
tli	Common.h	/^  TargetLibraryInfo tli;$/;"	m	class:ModuleOracle
transitType	CallGraph.cc	/^void CallGraphPass::transitType(Type *ToTy, Type *FromTy,$/;"	f	class:CallGraphPass
trimPathSlash	Common.cc	/^bool trimPathSlash(string &path, int slash) {$/;"	f
typeConfineInCast	CallGraph.cc	/^bool CallGraphPass::typeConfineInCast(CastInst *CastI) {$/;"	f	class:CallGraphPass
typeConfineInInitializer	CallGraph.cc	/^bool CallGraphPass::typeConfineInInitializer(User *Ini) {$/;"	f	class:CallGraphPass
typeConfineInStore	CallGraph.cc	/^bool CallGraphPass::typeConfineInStore(StoreInst *SI) {$/;"	f	class:CallGraphPass
typeConfineMap	CallGraph.cc	/^unordered_map<size_t, set<size_t>> CallGraphPass::typeConfineMap;$/;"	m	class:CallGraphPass	file:
typeConfineMap	CallGraph.h	/^		static unordered_map<size_t, set<size_t>>typeConfineMap;$/;"	m	class:CallGraphPass
typeEscapeSet	CallGraph.cc	/^set<size_t> CallGraphPass::typeEscapeSet;$/;"	m	class:CallGraphPass	file:
typeEscapeSet	CallGraph.h	/^		static set<size_t>typeEscapeSet;$/;"	m	class:CallGraphPass
typeFuncsMap	CallGraph.h	/^		static DenseMap<size_t, FuncSet>typeFuncsMap;$/;"	m	class:CallGraphPass
typeHash	Common.cc	/^size_t typeHash(Type *Ty) {$/;"	f
typeIdxHash	Common.cc	/^size_t typeIdxHash(Type *Ty, int Idx) {$/;"	f
typeTransitMap	CallGraph.cc	/^unordered_map<size_t, set<size_t>> CallGraphPass::typeTransitMap;$/;"	m	class:CallGraphPass	file:
typeTransitMap	CallGraph.h	/^		static unordered_map<size_t, set<size_t>>typeTransitMap;$/;"	m	class:CallGraphPass
typedValue	Common.h	/^  void typedValue(Value *val) {$/;"	f	class:Dumper
unrollLoops	CallGraph.cc	/^void CallGraphPass::unrollLoops(Function *F) {$/;"	f	class:CallGraphPass
updateHandleFlag	SecurityChecks.cc	/^void SecurityChecksPass::updateHandleFlag(int &errFlag, int &newFlag) {$/;"	f	class:SecurityChecksPass
updateReturnFlag	SecurityChecks.cc	/^void SecurityChecksPass::updateReturnFlag(int &errFlag, int &newFlag) {$/;"	f	class:SecurityChecksPass
use_c	DataFlowAnalysis.cc	/^pair<Value *, int8_t> use_c(Value *V, int8_t Arg) {$/;"	f
use_t	DataFlowAnalysis.h	/^typedef pair<Value *, int8_t> use_t;$/;"	t
valueName	Common.h	/^  void valueName(Value *val) {$/;"	f	class:Dumper
~DataFlowAnalysis	DataFlowAnalysis.h	/^		~DataFlowAnalysis() {}$/;"	f	class:DataFlowAnalysis
~Dumper	Common.h	/^  ~Dumper() {}$/;"	f	class:Dumper
~ModuleOracle	Common.h	/^  ~ModuleOracle() {}$/;"	f	class:ModuleOracle
~SecurityCheck	Common.h	/^  ~SecurityCheck() {$/;"	f	class:SecurityCheck
